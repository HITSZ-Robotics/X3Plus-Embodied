/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2024-07-18 21:56:35.600510
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[4]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[0]);
x10=((0.00215)*x2);
x11=((0.17455)*x4);
x12=((0.00215)*x0);
x13=((0.17455)*x2);
x14=((1.0)*x2);
x15=((1.0)*x7);
x16=((0.0829)*x2);
x17=((1.0)*x0);
x18=((0.00215)*x4);
x19=((1.0)*x4);
x20=((1.0)*x6);
x21=((0.0829)*x4);
x22=(x3*x9);
x23=(x3*x4);
x24=(x0*x3);
x25=(x1*x9);
x26=(x0*x1);
x27=(x1*x4);
x28=(x1*x14);
x29=(x17*x23);
x30=((((-1.0)*x28))+x23);
x31=((((-1.0)*x1*x19))+(((-1.0)*x14*x3)));
x32=((((-1.0)*x29))+((x2*x26)));
x33=((((-1.0)*x19*x22))+((x2*x25)));
x34=((((-1.0)*x17*x27))+(((-1.0)*x14*x24)));
x35=((((-1.0)*x19*x25))+(((-1.0)*x14*x22)));
x36=(((x19*x25))+((x14*x22)));
x37=(x32*x6);
x38=(x33*x6);
eerot[0]=(((x8*((((x34*x7))+x37))))+((x5*x9)));
eerot[1]=(((x5*(((((-1.0)*x20*x32))+(((-1.0)*x15*x34))))))+((x8*x9)));
eerot[2]=(((x7*(((((-1.0)*x14*x26))+x29))))+((x34*x6)));
IkReal x39=((1.0)*x24);
IkReal x40=((1.0)*x26);
eetrans[0]=((0.09825)+((x6*(((((-1.0)*x11*x40))+(((-1.0)*x13*x39))))))+(((-1.0)*x21*x40))+((x7*((((x11*x24))+(((-1.0)*x13*x40))))))+((x6*(((((-1.0)*x10*x40))+((x12*x23))))))+(((-0.0829)*x24))+((x7*((((x12*x27))+((x10*x24))))))+(((-1.0)*x16*x39)));
eerot[3]=(((x8*(((((-1.0)*x20*x33))+(((-1.0)*x15*x35))))))+((x0*x5)));
eerot[4]=(((x0*x8))+((x5*((((x35*x7))+x38)))));
eerot[5]=(((x33*x7))+((x36*x6)));
IkReal x41=((1.0)*x22);
eetrans[1]=(((x6*((((x11*x25))+((x13*x22))))))+((x21*x25))+((x7*(((((-1.0)*x11*x41))+((x13*x25))))))+((x16*x22))+((x7*(((((-1.0)*x10*x41))+(((-1.0)*x18*x25))))))+(((0.0829)*x22))+((x6*(((((-1.0)*x18*x41))+((x10*x25)))))));
eerot[6]=(x8*(((((-1.0)*x20*x31))+(((-1.0)*x15*x30)))));
eerot[7]=(x5*((((x31*x6))+((x30*x7)))));
eerot[8]=(((x31*x7))+((x6*(((((-1.0)*x19*x3))+x28)))));
IkReal x42=((1.0)*x3);
IkReal x43=((1.0)*x1);
eetrans[2]=((0.1425)+((x6*((((x1*x13))+(((-1.0)*x11*x42))))))+(((0.0829)*x1))+((x1*x16))+(((-1.0)*x21*x42))+((x6*(((((-1.0)*x18*x43))+(((-1.0)*x10*x42))))))+((x7*(((((-1.0)*x11*x43))+(((-1.0)*x13*x42))))))+((x7*((((x18*x3))+(((-1.0)*x10*x43)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }

IKFAST_API int* GetFreeParameters() { return NULL; }

IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.09825)+(((-0.17455)*r02))+px);
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=((-1.0)*r12);
new_py=((((-1.0)*py))+(((0.17455)*r12)));
new_r20=((-1.0)*r20);
new_r21=((-1.0)*r21);
new_r22=((-1.0)*r22);
new_pz=((0.1425)+(((-1.0)*pz))+(((0.17455)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x44=((1.0)*px);
IkReal x45=((1.0)*pz);
IkReal x46=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x46))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x45)));
rxp0_2=((((-1.0)*r10*x44))+((py*r00)));
rxp1_0=((((-1.0)*r21*x46))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x45)));
rxp1_2=((((-1.0)*r11*x44))+((py*r01)));
rxp2_0=((((-1.0)*r22*x46))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x45))+((px*r22)));
rxp2_2=((((-1.0)*r12*x44))+((py*r02)));
{
IkReal j4eval[1];
j4eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2, j3, j4]

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x48 = IKatan2WithCheck(IkReal(((-1.0)*npy)),IkReal(((-1.0)*npx)),IKFAST_ATAN2_MAGTHRESH);
if(!x48.valid){
continue;
}
IkReal x47=x48.value;
j4array[0]=((-1.0)*x47);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x47)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
cj2array[0]=((-0.999663691485229)+(((-0.312845130019891)*npy*sj4))+(((0.312845130019891)*cj4*npx))+(((72.7546813999747)*pp)));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j3eval[3];
IkReal x49=((356470000.0)*npz);
IkReal x50=((82900000000.0)*pp);
j3eval[0]=((-1.0)+(((-1.0)*cj2)));
j3eval[1]=IKsign(((-59102726.0)+(((-59102726.0)*cj2))));
j3eval[2]=((IKabs(((((-1139445578.0)*cj2*sj2))+((sj2*x50))+(((-1.0)*x49))+(((-1.0)*cj2*x49))+(((-1139828783.25)*sj2)))))+(IKabs(((-1139828783.25)+((cj2*x50))+(((-2279274361.25)*cj2))+(((-1139445578.0)*(cj2*cj2)))+((sj2*x49))+x50))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x51=((8290000.0)*sj2);
IkReal x52=(npy*sj4);
IkReal x53=(cj4*npx);
IkReal x54=((8290000.0)*npz);
IkReal x55=((8290000.0)*cj2);
j3eval[0]=((-1.0)+(((-1.0)*cj2)));
j3eval[1]=((IKabs(((-17823.5)+(((-1.0)*x53*x55))+((npz*x51))+(((8290000.0)*x52))+(((-8290000.0)*x53))+(((-17823.5)*cj2))+((x52*x55)))))+(IKabs(((((-1.0)*x51*x53))+((x51*x52))+(((-1.0)*x54))+(((-1.0)*cj2*x54))+(((-17823.5)*sj2))))));
j3eval[2]=IKsign(((-1374482.0)+(((-1374482.0)*cj2))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x56=(npy*sj4);
IkReal x57=((10000.0)*npz);
IkReal x58=((465.116279069767)*cj2);
IkReal x59=((829.0)*cj2);
IkReal x60=(cj4*npx);
IkReal x61=(npz*sj2);
IkReal x62=((68.7241)*sj2);
j3eval[0]=((-1.0)+(((-465.116279069767)*x60))+(((-465.116279069767)*x61))+(((-1.0)*x58*x60))+((x56*x58))+(((465.116279069767)*x56))+(((-1.0)*cj2)));
j3eval[1]=((IKabs(((-68.7241)+(((-137.4482)*cj2))+(((-68.7241)*(cj2*cj2)))+((npz*x57)))))+(IKabs(((((-21.5)*npz))+((x56*x57))+(((-1.0)*cj2*x62))+(((-1.0)*x62))+(((-1.0)*x57*x60))))));
j3eval[2]=IKsign(((-1.78235)+(((-829.0)*x60))+(((-829.0)*x61))+(((-1.0)*x59*x60))+(((-1.78235)*cj2))+(((829.0)*x56))+((x56*x59))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x63=((829.0)*cj2);
IkReal x64=(npy*sj4);
IkReal x65=(cj4*npx);
IkReal x66=((68.7241)*sj2);
IkReal x67=((10000.0)*npz);
CheckValue<IkReal> x68=IKPowWithIntegerCheck(IKsign(((-1.78235)+(((-829.0)*npz*sj2))+(((-829.0)*x65))+(((-1.78235)*cj2))+((x63*x64))+(((829.0)*x64))+(((-1.0)*x63*x65)))),-1);
if(!x68.valid){
continue;
}
CheckValue<IkReal> x69 = IKatan2WithCheck(IkReal(((-68.7241)+(((-137.4482)*cj2))+(((-68.7241)*(cj2*cj2)))+((npz*x67)))),IkReal(((((-21.5)*npz))+(((-1.0)*cj2*x66))+(((-1.0)*x66))+(((-1.0)*x65*x67))+((x64*x67)))),IKFAST_ATAN2_MAGTHRESH);
if(!x69.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x68.value)))+(x69.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x70=IKcos(j3);
IkReal x71=IKsin(j3);
IkReal x72=(npy*sj4);
IkReal x73=((0.0829)*cj2);
IkReal x74=((1.0)*npz);
IkReal x75=((0.0829)*x71);
IkReal x76=(sj2*x70);
IkReal x77=((0.00035647)*x71);
IkReal x78=((1.0)*cj4*npx);
evalcond[0]=((((-1.0)*x74))+(((0.0829)*x70))+(((-1.0)*sj2*x75))+((x70*x73)));
evalcond[1]=((-0.0137494425)+(((0.00035647)*x76))+(((-0.01374482)*cj2))+pp+x77+((cj2*x77)));
evalcond[2]=((-0.00215)+(((-1.0)*x78))+(((0.0829)*x76))+x75+x72+((x71*x73)));
evalcond[3]=((((0.0829)*sj2))+(((-1.0)*x70*x78))+(((-0.00215)*x70))+((npz*x71))+((x70*x72)));
evalcond[4]=((0.0829)+(((-1.0)*x70*x74))+x73+(((-0.00215)*x71))+(((-1.0)*x71*x78))+((x71*x72)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x93=((8290000.0)*sj2);
IkReal x94=(npy*sj4);
IkReal x95=(cj4*npx);
IkReal x96=((8290000.0)*npz);
IkReal x97=((8290000.0)*cj2);
CheckValue<IkReal> x98=IKPowWithIntegerCheck(IKsign(((-1374482.0)+(((-1374482.0)*cj2)))),-1);
if(!x98.valid){
continue;
}
CheckValue<IkReal> x99 = IKatan2WithCheck(IkReal(((-17823.5)+(((-1.0)*x95*x97))+(((-8290000.0)*x95))+(((-17823.5)*cj2))+((npz*x93))+(((8290000.0)*x94))+((x94*x97)))),IkReal((((x93*x94))+(((-1.0)*x96))+(((-1.0)*x93*x95))+(((-17823.5)*sj2))+(((-1.0)*cj2*x96)))),IKFAST_ATAN2_MAGTHRESH);
if(!x99.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x98.value)))+(x99.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x100=IKcos(j3);
IkReal x101=IKsin(j3);
IkReal x102=(npy*sj4);
IkReal x103=((0.0829)*cj2);
IkReal x104=((1.0)*npz);
IkReal x105=((0.0829)*x101);
IkReal x106=(sj2*x100);
IkReal x107=((0.00035647)*x101);
IkReal x108=((1.0)*cj4*npx);
evalcond[0]=((((-1.0)*sj2*x105))+(((0.0829)*x100))+(((-1.0)*x104))+((x100*x103)));
evalcond[1]=((-0.0137494425)+((cj2*x107))+(((0.00035647)*x106))+x107+(((-0.01374482)*cj2))+pp);
evalcond[2]=((-0.00215)+(((0.0829)*x106))+(((-1.0)*x108))+x105+x102+((x101*x103)));
evalcond[3]=((((-1.0)*x100*x108))+(((0.0829)*sj2))+(((-0.00215)*x100))+((npz*x101))+((x100*x102)));
evalcond[4]=((0.0829)+(((-1.0)*x101*x108))+(((-1.0)*x100*x104))+x103+(((-0.00215)*x101))+((x101*x102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x109=((356470000.0)*npz);
IkReal x110=((82900000000.0)*pp);
CheckValue<IkReal> x111=IKPowWithIntegerCheck(IKsign(((-59102726.0)+(((-59102726.0)*cj2)))),-1);
if(!x111.valid){
continue;
}
CheckValue<IkReal> x112 = IKatan2WithCheck(IkReal(((-1139828783.25)+(((-2279274361.25)*cj2))+((cj2*x110))+((sj2*x109))+(((-1139445578.0)*(cj2*cj2)))+x110)),IkReal(((((-1139445578.0)*cj2*sj2))+(((-1.0)*cj2*x109))+((sj2*x110))+(((-1.0)*x109))+(((-1139828783.25)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x112.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x111.value)))+(x112.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x113=IKcos(j3);
IkReal x114=IKsin(j3);
IkReal x115=(npy*sj4);
IkReal x116=((0.0829)*cj2);
IkReal x117=((1.0)*npz);
IkReal x118=((0.0829)*x114);
IkReal x119=(sj2*x113);
IkReal x120=((0.00035647)*x114);
IkReal x121=((1.0)*cj4*npx);
evalcond[0]=((((0.0829)*x113))+((x113*x116))+(((-1.0)*x117))+(((-1.0)*sj2*x118)));
evalcond[1]=((-0.0137494425)+((cj2*x120))+(((0.00035647)*x119))+x120+(((-0.01374482)*cj2))+pp);
evalcond[2]=((-0.00215)+((x114*x116))+(((0.0829)*x119))+(((-1.0)*x121))+x115+x118);
evalcond[3]=((((-1.0)*x113*x121))+(((0.0829)*sj2))+((x113*x115))+((npz*x114))+(((-0.00215)*x113)));
evalcond[4]=((0.0829)+((x114*x115))+(((-1.0)*x113*x117))+x116+(((-1.0)*x114*x121))+(((-0.00215)*x114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x79=((1.0)*sj3);
IkReal x80=((1.0)*sj2);
IkReal x81=((1.0)*sj4);
IkReal x82=((1.0)*cj4);
IkReal x83=((-1.0)*sj3);
IkReal x84=((((-1.0)*r01*x81))+((cj4*r00)));
IkReal x85=((((-1.0)*r11*x81))+((cj4*r10)));
IkReal x86=(((cj4*r20))+(((-1.0)*r21*x81)));
IkReal x87=(cj3*x85);
IkReal x88=(((cj3*r02))+((sj3*x84)));
IkReal x89=(((cj3*x84))+(((-1.0)*r02*x79)));
IkReal x90=(((cj3*r12))+((sj3*x85)));
IkReal x91=(((cj3*r22))+((sj3*x86)));
IkReal x92=(((cj3*x86))+((r22*x83)));
new_r00=((((-1.0)*x80*x88))+((cj2*x89)));
new_r01=(((sj2*x89))+((cj2*x88)));
new_r02=((((-1.0)*r00*x81))+(((-1.0)*r01*x82)));
new_r10=((((-1.0)*x80*x90))+((cj2*((((r12*x83))+x87)))));
new_r11=(((cj2*x90))+((sj2*((x87+(((-1.0)*r12*x79)))))));
new_r12=((((-1.0)*r11*x82))+(((-1.0)*r10*x81)));
new_r20=((((-1.0)*x80*x91))+((cj2*x92)));
new_r21=(((cj2*x91))+((sj2*x92)));
new_r22=((((-1.0)*r20*x81))+(((-1.0)*r21*x82)));
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-1.0)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r02))+IKsqr(new_r12)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1.0)*new_r02), new_r12);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - yahboomcar_X3plus (d603e82051dbe872eac27ad859b746bf)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
